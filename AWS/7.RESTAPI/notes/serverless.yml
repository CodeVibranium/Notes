service: notes-api
frameworkVersion: "2 || 3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: shahed-admin
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-south-1
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:*
  #     Resource: !GetAtt notesTable.Arn

functions:
  authorizer:
    handler: authorizer.authorize

  createNote:
    handler: handler.createNote
    enviornment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # used to keep-connection alive
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: POST
          path: notes
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:Update*"
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: PUT
          path: notes/{id}
          authorizer: authorizer

  getANote:
    handler: handler.getANote
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: GET
          path: notes/{id}
          authorizer: authorizer

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: GET
          path: notes
          authorizer: authorizer

  deleteANote:
    handler: handler.deleteANote
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # keeps connection alive, no need to to syn ack again
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: DELETE
          path: notes/{id}
          authorizer: authorizer
  # userLogin:
  #   handler: handler.login
  #   events:
  #     - method: POST
  #       path: login
  # thought of using this, but we can use congito pool, oauth2

plugins:
  - serverless-iam-roles-per-function

resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
